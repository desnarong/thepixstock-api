# Event Photo Sales - Database Setup & Implementation

## 🔧 Database Configuration

### **Updated .env Configuration**
```bash
# Database (ใช้ที่มีอยู่)
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=image_db  # เปลี่ยนเป็น thepixstock_db หรือใช้ที่มี
POSTGRES_USER=admin
POSTGRES_PASSWORD=adminpass

# Storage (ใช้ MinIO ที่มี)
MINIO_ENDPOINT=localhost:9000
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=miniosecret
MINIO_BUCKET_PREFIX=event-

# Cache
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0

# Security
JWT_SECRET=your_jwt_secret_for_thepixstock_super_secure_key_2024
JWT_ALGORITHM=HS256
API_TOKEN=your_api_token

# Photo Processing
IMAGE_RETENTION_DAYS=365
FACE_RECOGNITION_ENABLED=true
AUTO_PROCESSING_ENABLED=true

# AI Face Recognition
AI_PROCESS_URL=http://10.0.0.11:8001/process_face

# AWS (สำหรับ production)
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_REGION=ap-southeast-1

# Notifications
TELEGRAM_BOT_TOKEN=123456:ABC-DEF1234ghIkl-xyz
TELEGRAM_CHAT_ID=-584694398

# Payment Gateway
STRIPE_SECRET_KEY=sk_test_...
STRIPE_PUBLISHABLE_KEY=pk_test_...
PROMPTPAY_MERCHANT_ID=your_promptpay_id

# Email
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASSWORD=your_app_password
```

---

## 📁 **Project Structure**

```
thepixstock/
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── config.py
│   ├── database.py
│   ├── models/
│   │   ├── __init__.py
│   │   ├── user.py
│   │   ├── event.py
│   │   ├── photographer.py
│   │   ├── photo.py
│   │   ├── order.py
│   │   ├── payment.py
│   │   └── face.py
│   ├── schemas/
│   │   ├── __init__.py
│   │   ├── user.py
│   │   ├── event.py
│   │   └── ...
│   ├── api/
│   │   ├── __init__.py
│   │   ├── auth.py
│   │   ├── events.py
│   │   ├── photographers.py
│   │   ├── photos.py
│   │   └── ...
│   ├── services/
│   │   ├── __init__.py
│   │   ├── auth_service.py
│   │   ├── photo_service.py
│   │   ├── face_service.py
│   │   └── storage_service.py
│   └── utils/
│       ├── __init__.py
│       ├── security.py
│       ├── storage.py
│       └── helpers.py
├── alembic/
│   ├── versions/
│   └── env.py
├── scripts/
│   ├── create_db.py
│   ├── seed_data.py
│   └── migrate_existing.py
├── requirements.txt
├── alembic.ini
└── .env
```

---

## 🚀 **Step 1: Install Dependencies**

```bash
# requirements.txt
fastapi==0.104.1
uvicorn[standard]==0.24.0
sqlalchemy==2.0.23
alembic==1.12.1
psycopg2-binary==2.9.9
redis==5.0.1
python-multipart==0.0.6
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-dotenv==1.0.0
pillow==10.1.0
minio==7.2.0
celery==5.3.4
stripe==7.8.0
emails==0.6.0
face-recognition==1.3.0
opencv-python==4.8.1.78
numpy==1.24.3
pandas==2.1.3
python-telegram-bot==20.7

# Install
pip install -r requirements.txt
```

---

## 🗄️ **Step 2: Database Configuration**

### **app/config.py**
```python
from pydantic_settings import BaseSettings
from typing import Optional

class Settings(BaseSettings):
    # Database
    POSTGRES_HOST: str = "localhost"
    POSTGRES_PORT: int = 5432
    POSTGRES_DB: str = "image_db"
    POSTGRES_USER: str = "admin"
    POSTGRES_PASSWORD: str = "adminpass"
    
    # Storage
    MINIO_ENDPOINT: str = "localhost:9000"
    MINIO_ACCESS_KEY: str = "minioadmin"
    MINIO_SECRET_KEY: str = "miniosecret"
    MINIO_BUCKET_PREFIX: str = "event-"
    
    # Cache
    REDIS_HOST: str = "localhost"
    REDIS_PORT: int = 6379
    REDIS_DB: int = 0
    
    # Security
    JWT_SECRET: str = "your_jwt_secret"
    JWT_ALGORITHM: str = "HS256"
    JWT_EXPIRE_MINUTES: int = 30
    
    # Features
    FACE_RECOGNITION_ENABLED: bool = True
    AUTO_PROCESSING_ENABLED: bool = True
    AI_PROCESS_URL: str = "http://10.0.0.11:8001/process_face"
    
    # Payment
    STRIPE_SECRET_KEY: Optional[str] = None
    STRIPE_PUBLISHABLE_KEY: Optional[str] = None
    
    @property
    def DATABASE_URL(self) -> str:
        return f"postgresql://{self.POSTGRES_USER}:{self.POSTGRES_PASSWORD}@{self.POSTGRES_HOST}:{self.POSTGRES_PORT}/{self.POSTGRES_DB}"
    
    @property
    def REDIS_URL(self) -> str:
        return f"redis://{self.REDIS_HOST}:{self.REDIS_PORT}/{self.REDIS_DB}"
    
    class Config:
        env_file = ".env"

settings = Settings()
```

### **app/database.py**
```python
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.config import settings

# Database engine
engine = create_engine(
    settings.DATABASE_URL,
    pool_pre_ping=True,
    pool_recycle=300,
    echo=False  # Set to True for SQL debugging
)

# Session
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base model
Base = declarative_base()

# Dependency for getting DB session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

---

## 📊 **Step 3: Create Database Models**

### **app/models/user.py**
```python
from sqlalchemy import Column, Integer, String, Boolean, DateTime, Enum, Text
from sqlalchemy.orm import relationship
from app.database import Base
from datetime import datetime
import enum

class UserRole(enum.Enum):
    ADMIN = "admin"
    PHOTOGRAPHER = "photographer"
    CUSTOMER = "customer"

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String(255), unique=True, index=True, nullable=False)
    password_hash = Column(String(255), nullable=False)
    role = Column(Enum(UserRole), nullable=False)
    first_name = Column(String(100))
    last_name = Column(String(100))
    phone = Column(String(20))
    is_active = Column(Boolean, default=True)
    email_verified = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_login = Column(DateTime)
    
    # Relationships
    photographer = relationship("Photographer", back_populates="user", uselist=False)
    customer = relationship("Customer", back_populates="user", uselist=False)
    created_events = relationship("Event", back_populates="creator")
    
    @property
    def full_name(self):
        if self.first_name and self.last_name:
            return f"{self.first_name} {self.last_name}"
        return self.first_name or self.last_name or self.email

class UserSession(Base):
    __tablename__ = "user_sessions"
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, nullable=False)
    token_hash = Column(String(255), nullable=False)
    device_info = Column(Text)
    ip_address = Column(String(45))  # IPv6 support
    expires_at = Column(DateTime, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
```

### **app/models/event.py**
```python
from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean, ForeignKey, Enum
from sqlalchemy.orm import relationship
from app.database import Base
from datetime import datetime
import enum

class EventStatus(enum.Enum):
    PLANNING = "planning"
    SHOOTING = "shooting"
    UPLOADING = "uploading"
    PROCESSING = "processing"
    REVIEWING = "reviewing"
    LIVE = "live"
    CLOSED = "closed"

class Event(Base):
    __tablename__ = "events"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), nullable=False)
    description = Column(Text)
    event_date = Column(DateTime)
    location = Column(String(255))
    venue = Column(String(255))
    status = Column(Enum(EventStatus), default=EventStatus.PLANNING)
    sales_enabled = Column(Boolean, default=False)
    sales_start_date = Column(DateTime)
    sales_end_date = Column(DateTime)
    total_photos = Column(Integer, default=0)
    approved_photos = Column(Integer, default=0)
    rejected_photos = Column(Integer, default=0)
    pending_photos = Column(Integer, default=0)
    face_detection_completed = Column(Boolean, default=False)
    created_by = Column(Integer, ForeignKey("users.id"))
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    creator = relationship("User", back_populates="created_events")
    photos = relationship("Photo", back_populates="event")
    photographers = relationship("EventPhotographer", back_populates="event")
    pricing = relationship("EventPricing", back_populates="event")
    orders = relationship("Order", back_populates="event")

class EventSetting(Base):
    __tablename__ = "event_settings"
    
    id = Column(Integer, primary_key=True)
    event_id = Column(Integer, ForeignKey("events.id"), nullable=False)
    setting_key = Column(String(100), nullable=False)
    setting_value = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
```

### **app/models/photographer.py**
```python
from sqlalchemy import Column, Integer, String, Text, ForeignKey, Boolean, DECIMAL, Enum
from sqlalchemy.orm import relationship
from app.database import Base
from datetime import datetime
import enum

class PhotographerStatus(enum.Enum):
    ACTIVE = "active"
    INACTIVE = "inactive"
    SUSPENDED = "suspended"

class AssignmentRole(enum.Enum):
    PRIMARY = "primary"
    SECONDARY = "secondary"
    ASSISTANT = "assistant"

class Photographer(Base):
    __tablename__ = "photographers"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), unique=True)
    portfolio_url = Column(String(500))
    bio = Column(Text)
    specialties = Column(Text)  # JSON
    commission_rate = Column(DECIMAL(5,2), default=0.00)
    bank_account_name = Column(String(255))
    bank_account_number = Column(String(50))
    bank_name = Column(String(100))
    tax_id = Column(String(50))
    address = Column(Text)
    emergency_contact_name = Column(String(255))
    emergency_contact_phone = Column(String(20))
    status = Column(Enum(PhotographerStatus), default=PhotographerStatus.ACTIVE)
    total_events = Column(Integer, default=0)
    total_photos_uploaded = Column(Integer, default=0)
    total_revenue_generated = Column(DECIMAL(12,2), default=0.00)
    rating = Column(DECIMAL(3,2), default=0.00)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    user = relationship("User", back_populates="photographer")
    event_assignments = relationship("EventPhotographer", back_populates="photographer")
    photos = relationship("Photo", back_populates="photographer")

class EventPhotographer(Base):
    __tablename__ = "event_photographers"
    
    id = Column(Integer, primary_key=True)
    event_id = Column(Integer, ForeignKey("events.id"), nullable=False)
    photographer_id = Column(Integer, ForeignKey("photographers.id"), nullable=False)
    assigned_by = Column(Integer, ForeignKey("users.id"), nullable=False)
    role = Column(Enum(AssignmentRole), default=AssignmentRole.PRIMARY)
    assigned_at = Column(DateTime, default=datetime.utcnow)
    upload_permission = Column(Boolean, default=True)
    max_upload_size_mb = Column(Integer, default=1000)
    notes = Column(Text)
    
    # Relationships
    event = relationship("Event", back_populates="photographers")
    photographer = relationship("Photographer", back_populates="event_assignments")
```

### **app/models/customer.py**
```python
from sqlalchemy import Column, Integer, String, Text, ForeignKey, Boolean, DECIMAL, Date, DateTime, Enum
from sqlalchemy.orm import relationship
from app.database import Base
from datetime import datetime
import enum

class Gender(enum.Enum):
    MALE = "male"
    FEMALE = "female"
    OTHER = "other"

class Customer(Base):
    __tablename__ = "customers"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), unique=True)
    date_of_birth = Column(Date)
    gender = Column(Enum(Gender))
    address = Column(Text)
    city = Column(String(100))
    country = Column(String(100))
    postal_code = Column(String(20))
    preferences = Column(Text)  # JSON
    marketing_consent = Column(Boolean, default=False)
    total_orders = Column(Integer, default=0)
    total_spent = Column(DECIMAL(12,2), default=0.00)
    last_order_date = Column(DateTime)
    customer_since = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    user = relationship("User", back_populates="customer")
    orders = relationship("Order", back_populates="customer")
    shopping_carts = relationship("ShoppingCart", back_populates="customer")
    face_searches = relationship("FaceSearch", back_populates="customer")
```

---

## 🔄 **Step 4: Database Migration Setup**

### **alembic.ini**
```ini
[alembic]
script_location = alembic
prepend_sys_path = .
version_path_separator = os
sqlalchemy.url = postgresql://admin:adminpass@localhost:5432/image_db

[post_write_hooks]

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
```

### **alembic/env.py**
```python
from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from alembic import context
import os
import sys

# Add app to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from app.database import Base
from app.config import settings

# Import all models to ensure they're registered
from app.models.user import User, UserSession
from app.models.event import Event, EventSetting
from app.models.photographer import Photographer, EventPhotographer
from app.models.customer import Customer
# Import other models...

config = context.config

# Set database URL from settings
config.set_main_option("sqlalchemy.url", settings.DATABASE_URL)

if config.config_file_name is not None:
    fileConfig(config.config_file_name)

target_metadata = Base.metadata

def run_migrations_offline() -> None:
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
```

---

## 🚀 **Step 5: Initialize Database**

### **scripts/create_db.py**
```python
#!/usr/bin/env python3
"""
Create database tables and initial setup
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from app.database import engine, Base
from app.config import settings
from sqlalchemy import text
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

def create_database():
    """Create database if it doesn't exist"""
    try:
        # Connect to PostgreSQL server (not specific database)
        conn = psycopg2.connect(
            host=settings.POSTGRES_HOST,
            port=settings.POSTGRES_PORT,
            user=settings.POSTGRES_USER,
            password=settings.POSTGRES_PASSWORD,
            database='postgres'  # Default database
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # Check if database exists
        cursor.execute(f"SELECT 1 FROM pg_database WHERE datname = '{settings.POSTGRES_DB}'")
        exists = cursor.fetchone()
        
        if not exists:
            print(f"Creating database '{settings.POSTGRES_DB}'...")
            cursor.execute(f'CREATE DATABASE "{settings.POSTGRES_DB}"')
            print("Database created successfully!")
        else:
            print(f"Database '{settings.POSTGRES_DB}' already exists.")
            
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"Error creating database: {e}")
        return False
    
    return True

def create_tables():
    """Create all tables"""
    try:
        print("Creating tables...")
        Base.metadata.create_all(bind=engine)
        print("Tables created successfully!")
        return True
    except Exception as e:
        print(f"Error creating tables: {e}")
        return False

def main():
    print("🗄️  Setting up ThePixStock Database...")
    
    # Create database
    if not create_database():
        print("❌ Failed to create database")
        return
    
    # Create tables
    if not create_tables():
        print("❌ Failed to create tables")
        return
    
    print("✅ Database setup completed!")
    print(f"📍 Database URL: {settings.DATABASE_URL}")
    print("🚀 Ready to run migrations and seed data!")

if __name__ == "__main__":
    main()
```

---

## 📊 **Step 6: Run Database Setup**

```bash
# 1. Create database and tables
python scripts/create_db.py

# 2. Initialize Alembic (if not done)
alembic init alembic

# 3. Create first migration
alembic revision --autogenerate -m "Initial tables - Phase 0"

# 4. Run migration
alembic upgrade head

# 5. Verify setup
python -c "
from app.database import engine
from sqlalchemy import text
with engine.connect() as conn:
    result = conn.execute(text('SELECT tablename FROM pg_tables WHERE schemaname = \'public\''))
    tables = [row[0] for row in result]
    print('Created tables:', tables)
"
```

---

## ✅ **Verification Checklist**

### **Database Connection Test**
```python
# test_db.py
from app.database import SessionLocal, engine
from app.models.user import User
from sqlalchemy import text

def test_connection():
    try:
        # Test connection
        with engine.connect() as conn:
            result = conn.execute(text("SELECT version()"))
            print("✅ PostgreSQL connection successful!")
            print(f"📍 Version: {result.fetchone()[0]}")
        
        # Test ORM
        db = SessionLocal()
        count = db.query(User).count()
        print(f"✅ ORM working! Users count: {count}")
        db.close()
        
        return True
    except Exception as e:
        print(f"❌ Database test failed: {e}")
        return False

if __name__ == "__main__":
    test_connection()
```

### **Next Steps**
1. ✅ **Database Setup** - Complete
2. 🔄 **Phase 1 Models** - Photo, Order, Payment tables
3. 🔄 **Seed Data** - Create admin user and test data
4. 🔄 **API Integration** - Connect FastAPI to database
5. 🔄 **Authentication** - JWT implementation

---

**สถานะ:** Database Foundation Ready ✅  
**ฐานข้อมูล:** PostgreSQL configured  
**Models:** User, Event, Photographer, Customer  
**พร้อมสำหรับ:** Phase 1 Implementation
